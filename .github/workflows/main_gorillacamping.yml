# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - gorillacamping

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            release.zip
            !venv/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'gorillacamping'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_67404101FC08467B86CC008258A8F61D }}

      - name: 'Health Check'
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Check if the app is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" https://gorillacamping.azurewebsites.net/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed - Application is running"
            
            # Check Azure services status
            curl -s https://gorillacamping.azurewebsites.net/azure/config | \
              python3 -c "
            import sys, json
            try:
              data = json.load(sys.stdin)
              azure_services = data.get('azure_services_available', {})
              active_services = [k for k, v in azure_services.items() if v]
              if active_services:
                print(f'✅ Active Azure services: {", ".join(active_services)}')
              else:
                print('⚠️ No Azure services configured - using fallback services')
            except:
              print('⚠️ Could not parse Azure configuration')
            "
          else
            echo "❌ Health check failed - HTTP $response"
            echo "Application may not be ready yet. Check Azure App Service logs."
            exit 1
          fi